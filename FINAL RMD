#INTRO - SUMMARY OF LAST PROJECT
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(include = F)
knitr::opts_chunk$set(collapse = T, results = 'hide', warning = F, message = F, error = F)
options(scientific=T, digits = 3)
options(scipen=999)
```
```{r basicfcn}
loadPkg = function(x) { if (!require(x,character.only=T, quietly =T)) { install.packages(x,dep=T,repos="http://cran.us.r-project.org"); if(!require(x,character.only=T)) stop("Package not found") } }
```

```{r NAs, echo=FALSE}
athlete_events = read.csv("athlete_events.csv")
str(athlete_events)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
```

```{r NAs, echo=FALSE}
# omitting NAs leaves only athletes that won medals
summer_events = na.omit(athlete_events[athlete_events$Season == 'Summer',])
# keeping NAs for analysis of winners and losers
summer_w_NAs = athlete_events[athlete_events$Season=='Summer',]
```

```{r , echo=FALSE, include=TRUE}
# participants over time
athlete_events_MPC = summer_w_NAs %>% group_by(Year) %>% summarise(count = n_distinct(Team))
ggplot(data=athlete_events_MPC, aes(x=Year, y=count)) +
  geom_line()+
  geom_point() + ggtitle('Number of Olympic athletes over time') + ylab('Number of participants')
```

```{r , echo=FALSE, include=TRUE}
# plot male female participants over time
group_count_mf <- summer_w_NAs %>% group_by(Year, Sex) %>%
  summarize(Athletes = length(unique(ID)))
group_count_mf$Year <- as.integer(group_count_mf$Year)
ggplot(group_count_mf, aes(x=Year, y=Athletes, group=Sex, color=Sex)) +
  geom_point(size=2) +
  geom_line()  +
  scale_color_manual(values=c("deeppink1","dodgerblue1")) +
  labs(title = "Number of male and female Olympic Athletes over time") +
  theme(plot.title = element_text(hjust = 0.5))
```

```{r , echo=FALSE, include=TRUE}
# male and female by sport
female_w_NAs = summer_w_NAs[summer_w_NAs$Sex == 'F',]
male_w_NAs = summer_w_NAs[summer_w_NAs$Sex == 'M',]
female_sport_participation = sort(table(female_w_NAs$Sport), decreasing = TRUE)
male_sport_participation = sort(table(male_w_NAs$Sport), decreasing = TRUE)
barplot(female_sport_participation[2:10], las=2, main="Number of Female Athletes by Sport", col = 'deeppink1',
        ylim = c(0,18000))
barplot(male_sport_participation[2:10], las=2, main="Number of Male Athletes by Sport", col='dodgerblue1',
        ylim = c(0,18000))
```

```{r Read, echo=FALSE, include=FALSE}
# Medals per country
medals_table = table(summer_events$Medal,summer_events$NOC)
mean(medals_table)
```

```{r Medals by country barplot, echo=FALSE, include=TRUE}
# stacked barplot of medals won by top countries
subset_medals = medals_table[,c('USA', 'URS', 'GBR', 'GER', 'ITA', 'FRA', 'AUS',
                                'CHN','HUN','JPN','NED','RUS','SWE')]
barplot(subset_medals, main = "Total medals won by country", 
        ylab = 'Country Code', xlab = "Number of medals won", col = c('gold', 'light gray','gold4'),
        legend.text = c("Gold",'Silver','Bronze'), horiz = TRUE, las=2)
```

```{r histograms, echo=FALSE, include=TRUE}
# Descriptive stats of Age, Height, Weight
par(mfrow=c(1,3))
hist(summer_w_NAs$Age, breaks = 30, main = 'Histogram of Age', xlab = 'Age', ylab = 'Frequency', col = 'rosybrown1')
#hist(f$Age, breaks = 30)
#hist(m$Age, breaks = 30)
hist(summer_w_NAs$Height, breaks = 30, main = 'Histogram of Height',xlab = 'Height(cm)', ylab = 'Frequency', col = 'darkseagreen3')
#hist(f$Height, breaks = 30)
#hist(m$Height, breaks = 30)
hist(summer_w_NAs$Weight, breaks = 30, main = 'Histogram of Weight',xlab = 'Weight(kg)', ylab = 'Frequency', col = 'lightblue3')
#hist(f$Weight, breaks = 30)
#hist(m$Weight, breaks = 30)
```

#SMART 1

```{r Read, echo=FALSE, include=FALSE}
athlete_events = read.csv("athlete_events.csv")
str(athlete_events)
```
```{r Preproccessing, echo=FALSE, include=FALSE}
# omitting NAs
# Function to 
desiredCols = c("ID","Name","Sex","Age","Height","Weight","Team","NOC","Games","Year","Season","City","Sport","Event","Medal")
completeFun <- function(athlete_events, desiredCols) {
  completeVec <- complete.cases(athlete_events[, desiredCols])
  return(athlete_events[completeVec, ])
}
# Rid NA's - Keep NA Medals
#columns minus medals
na.wmedals = c("ID","Name","Sex","Age","Height","Weight","Team","NOC","Games","Year","Season","City","Sport","Event")
# All columns
na.all = c("ID","Name","Sex","Age","Height","Weight","Team","NOC","Games","Year","Season","City","Sport","Event","Medal")
# Get rid of NA's except for 'Medal' Column
athleet_events_na.wmedals = completeFun(athlete_events, na.wmedals)
# Get rid of all NA's
athleet_events_na.all = completeFun(athlete_events, na.all)
```
```{r Summer/Winter, echo=FALSE, include=FALSE}
athlete_events_summer_na.wmedals = athleet_events_na.wmedals[ which(athleet_events_na.wmedals$Season == 'Summer'),]
summary(athlete_events_summer_na.wmedals)
athlete_events_winter_na.wmedals = athleet_events_na.wmedals[ which(athleet_events_na.wmedals$Season == 'Winter'),]
```
```{r SMART1, echo=FALSE, include=FALSE}
library(ggplot2)
library(dplyr)
library(tidyr)
### Subset Records by Team, Year, Name, Event, Medal
athlete_events_recode = athlete_events_summer_na.wmedals %>% group_by(Team , Year , Name , Event , Medal) %>% 
       summarize()
### Recode Medals into Numerical vallues
athlete_events_recode$medal_value[athlete_events_recode$Medal == "Gold"] <- 1
athlete_events_recode$medal_value[athlete_events_recode$Medal == "Silver"] <- 1
athlete_events_recode$medal_value[athlete_events_recode$Medal == "Bronze"] <- 1
athlete_events_recode$medal_value[is.na(athlete_events_recode$Medal)] <- 0
### Set Variables for FOR LOOP - Country and Host Years must match by Indicies
Countries = c("Italy", "Japan", "Mexico", "Spain","United States","Australia","Greece","China")
Host_Years = c(1960, 1964, 1968, 1992,1996,2000,2004,2008)
plot_list = c()
plot_list1 = c()
aov_list = c()
### Begin FOR LOOP - Loop Provides an Anova Table and two Graphs per Country
for(i in 1:8){
  
  ## Index of Host Country and Olympic Year
  
  Country = Countries[i]
  Host_Year = Host_Years[i]
  
  ## Set Years Surrounding the Host Year
  
  First_Year = Host_Year - 8
  Before_Year = Host_Year - 4
  After_Year = Host_Year + 4
  Last_Year = Host_Year + 8

  ### Subset table by Country
  
  athlete_events_country = athlete_events_recode[ which(athlete_events_recode$Team == Country),]

  ### Subset by First Year
  
  athlete_events_first = athlete_events_country[ which(athlete_events_country$Year == First_Year),]

  ### Subset by Before Year
  
  athlete_events_before = athlete_events_country[ which(athlete_events_country$Year == Before_Year),]

  ### Subset by Host Year 
  
  athlete_events_host = athlete_events_country[ which(athlete_events_country$Year == Host_Year),]
  
  ### Subset by after Year
  
  athlete_events_after = athlete_events_country[ which(athlete_events_country$Year == After_Year),]
  
  ### Subset by Last Year
  
  athlete_events_last = athlete_events_country[ which(athlete_events_country$Year == Last_Year),]
  
  ### Concat Before, Host and During Year based on year, country, event inner join
  
  concat = rbind(athlete_events_first, athlete_events_before)
  
  concat1 = rbind(concat, athlete_events_host)
  
  concat2 = rbind(concat1, athlete_events_after)
  
  athlete_events_5 = rbind(concat2, athlete_events_last)
  
  athlete_events_5$Year = as.factor(athlete_events_5$Year)
  
  Sum_Medals = aggregate((Medal = athlete_events_5$medal_value), by=list(Year=athlete_events_5$Year), nfrequency = 1, FUN=sum)
  Average_Medals = aggregate((Medal = athlete_events_5$medal_value), by=list(Year=athlete_events_5$Year), FUN=mean, nfrequency = 1)
  
  colnames(Sum_Medals)[2] = "Total Medals"
  colnames(Average_Medals)[2] = "Average Medals Per Event"
  
  b = aov(medal_value ~ Year,data = athlete_events_5)
  #print(summary(b))
  #print(TukeyHSD(b))
  
  aov_list[[i]] <- b
  
  Sum_Medals <- Sum_Medals %>% mutate( ToHighlight = ifelse( Sum_Medals$Year == Host_Year, "yes", "no" ) )
  
  c <- ggplot(Sum_Medals, aes(x = Year, y = Sum_Medals$"Total Medals", fill = ToHighlight)) +
    geom_bar(stat = 'identity', position = 'dodge') + ggtitle(Country) + xlab("Year") + ylab("Total Medals")+ scale_fill_manual( values = c( "yes"="gold2", "no"="dodgerblue4" ), guide = FALSE )
  
  plot_list[[i]] <- c
  #print(plot_list[[i]])
  
  Average_Medals <- Average_Medals %>% mutate( ToHighlight = ifelse( Average_Medals$Year == Host_Year, "yes", "no" ) )
  
  d <- ggplot(Average_Medals, aes(x = Year, y = Average_Medals$"Average Medals Per Event", fill = ToHighlight)) +
    geom_bar(stat = 'identity', position = 'dodge') + ggtitle(Country) + xlab("Year") + ylab("Average Medals Per Event") + scale_fill_manual( values = c( "yes"="gold2", "no"="dodgerblue4" ), guide = FALSE )

  plot_list1[[i]] <- d
  #print(plot_list1[[i]])
  
}
```
```{r AOV for SMART1, echo=FALSE, include=TRUE}
for(i in 1:8){
  
print(summary(aov_list[[i]]))
print(TukeyHSD(aov_list[[i]]))

if (i == 1){
  print("Italy")
  print("Results from the ANOVA test indicate high and slightly positive correlation between 1960 (host) and 1956 (Year before host), as well as a high and slightly positive correlation between 1960 and 1964 (Year after host). This suggests that the means of the before, host and after years are similar and slightly increasing over time. We can conclude that host year does slightly effect medals won and year after given the lower correlations between host year and 1952/1968. ")
  print("")
}
else if (i == 2 ){
  print("Japan")
  print("Results from the ANOVA test indicate high and slightly positive correlation between 1964 (host) and 1960 (Year before host), as well as a low and slightly positive correlation between 1964 and 1968 (Year after host). This suggest that the means of before and host years are similar and slightly increasing over time, while the means of host and after are dramaticall different and increasing over time. We can conclude that host year does slightly effect medals won and significantly effects the medals won in the year after host")
  print("")
}
else if (i == 3 ){
  print("Mexico")
  print("Results from the ANOVA test indicate high and slightly positive correlation between 1968 (host) and 1964 (Year before host), as well as moderate, but slightly negative correlation between 1968 and 1972 (Year after host). This suggest that the means of before and host years are similar and slightly increasing over time, while the means of host and after are dramaticall different and decreasing over time. We can conclude that host year does slightly effect medals won and significantly (but negatively) effects  the medals won in the year after host. This is an anomoly in our data.")
  print("")
}
else if (i == 4 ){
  print("Spain")
  print("Results from the ANOVA test indicate an extremely low and slightly positive correlation between 1992 (host) and 1988 (Year before host), as well as moderate and slightly positive correlation between 1992 and 1996 (Year after host). This suggest that the means of before and host years are drastically different and increasing over time, while the means of host and after are more similar and increasing over time. We can conclude that host year does extremely effect medals won  and significantly effects  the medals won in the year after host as well.")
  print("")
}
else if (i == 5 ){
  print("United States")
  print("Results from the ANOVA test indicate an extremely high and slightly positive correlation between 1996 (host) and 1992 (Year before host), as well as high and slightly positive correlation between 1992 and 1996 (Year after host). This suggest that the means of before and host years are significantly similar and increasing over time, as well as the means of host and after years. We can conclude that host year does slightly effect medals won  and also slightly effects the medals won in the year after host.")
  print("")
}
else if (i == 6 ){
    print("Australia")
  print("Results from the ANOVA test indicate an extremely high and slightly negative correlation between 2000 (host) and 1996 (Year before host), as well as high and slightly positive correlation between 2000 and 2004 (Year after host). This suggest that the means of before and host years are significantly similar and decreasing over time, while the means of the host and after years are significantly similar, but increasing over time. We can conclude that host year does not effect medals won and the host year also does not effect the medals won in the year after host.This is an anomoly in our data.")
  print("")
}
else if (i == 7 ){
    print("Greece")
  print("Results from the ANOVA test indicate an moderate and slightly negative correlation between 2004 (host) and 2000 (Year before host), as well as high and slightly negative correlation between 2004 and 2008 (Year after host). This suggest that the means of before and host years are significantly different and decreasing over time, as well as the means of host and after years (although these means are more similar). We can conclude that host year does not effect medals won and the host year also does not effect the medals won in the year after host. Although one could make an argument that knowing they had a host year coming up Greece was galvanized and therefore won more medals in the year before.")
  print("")
}
else if (i == 8 ){
      print("China")
  print("Results from the ANOVA test indicate an low and slightly positive correlation between 2008 (host) and 2004 (Year before host), as well as high and slightly positive correlation between 2008 and 2012 (Year after host). This suggest that the means of before and host years are significantly different and increasing over time and the means of host and after years are significantly similar and increasing over time. We can conclude that host year does significantly effect medals won and the host year slighlty effects the medals won in the year after host. China also shows that their medal winning streak continues for at least two years after their host. Hosting may have galvanized the people or government into a higher Olympic participation.")
  print("")
}




}





```
```{r Plots for SMART1, echo=FALSE, include=TRUE}
for(i in 1:8){

x = data.frame(plot_list[[i]][1])
y <- ggplot(x, aes(x = data.Year, y = data.Total.Medals, fill = data.ToHighlight)) +
    geom_bar(stat = 'identity', position = 'dodge') + ggtitle(Countries[i]) + xlab("Year") + ylab("Total Medals") + scale_fill_manual( values = c( "yes"="gold2", "no"="dodgerblue4" ), guide = FALSE )
print(y)

x1 = data.frame(plot_list1[[i]][1])
y1 <- ggplot(x1, aes(x = data.Year, y = data.Average.Medals.Per.Event, fill = data.ToHighlight)) +
    geom_bar(stat = 'identity', position = 'dodge') + ggtitle(Countries[i]) + xlab("Year") + ylab("Average Medals Per Event") + scale_fill_manual( values = c( "yes"="gold2", "no"="dodgerblue4" ), guide = FALSE )
print(y1)

}
```
#SMART 2

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(forcats)
library(plyr)
library(devtools)

# can add quietly=T option to the require() function
loadPkg = function(x) { if (!require(x,character.only=T, quietly =T)) { install.packages(x,dep=T,repos="http://cran.us.r-project.org"); if(!require(x,character.only=T)) stop("Package not found") } }
```

```{r read, echo=FALSE, include = TRUE}
setwd('/Users/carolinesklaver/Desktop/Intro_DS/Project 1')
athlete_events = read.csv("athlete_events.csv")
str(athlete_events)
```

```{r NAs, echo=FALSE}
# omitting NAs leaves only athletes that won medals
summer_events = na.omit(athlete_events[athlete_events$Season == 'Summer',])

# keeping NAs for analysis of winners and losers
summer_w_NAs = athlete_events[athlete_events$Season=='Summer',]
```

## Correlations: Age, Height, & Weight

Correlations between age, height, and weight, also represented in graphics. Height and weight are highly correlated (0.7951830). 

```{r AHW Correlations, echo=FALSE, include=TRUE}
# Corrrelations between age, height, weight
corr_col = cor(na.omit(summer_w_NAs[c(4,5,6)]))
corr_col
library(corrplot)
corrplot(corr_col, method = "circle")

# Plot the relationship between height and weight
ggplot(summer_w_NAs, aes(x=Weight, y=Height,, color=Sex)) +
  geom_point(size=0.5)+
  geom_smooth(method=glm)+
  ggtitle("Weight vs. Height for all Olympic Athletes")+
  xlab('Weight(kg)')+ ylab("Height(cm)")+ xlim(0,175)+
  scale_color_manual(values=c('deeppink2','royalblue'))
```


```{r winner loser, include=FALSE}
# differenciate between winners and losers
# THIS IS VERY IMPORTANT PART OF THE CODE
summer_w_NAs <- subset(athlete_events, Season == 'Summer')
summer_w_NAs$Medal <- as.character(summer_w_NAs$Medal)
summer_w_NAs$Medal[is.na(summer_w_NAs$Medal)] <- "Loser"

# made it 'a' in the beginning so that in the boxplots it is the one on the left
summer_w_NAs$Medal[summer_w_NAs$Medal == 'Bronze'] <- 'aWinner'
summer_w_NAs$Medal[summer_w_NAs$Medal == 'Silver'] <- 'aWinner'
summer_w_NAs$Medal[summer_w_NAs$Medal == 'Gold'] <- 'aWinner'

# make sure Medal is as factor
summer_w_NAs$Medal = as.factor(summer_w_NAs$Medal)
```


## Is the average Age/Height/Weight different between winners and losers?

```{r Split M/F, echo=FALSE}
# omit NAs
summer_w_NAs = na.omit(summer_w_NAs, Age)

# separate males and females
summer_F = summer_w_NAs[summer_w_NAs$Sex == 'F',]
summer_M = summer_w_NAs[summer_w_NAs$Sex == 'M',]

# separate winners and losers
F.Winner = summer_F[summer_F$Medal == 'aWinner',]
F.Loser = summer_F[summer_F$Medal == 'Loser',]

M.Winner = summer_M[summer_M$Medal == 'aWinner',]
M.Loser = summer_M[summer_M$Medal == 'Loser',]

```


## T-Tests

Females: Age - win: 24.44824, lose: 23.49902, SIG p-value
         Height - win: 171.1506, lose: 167.6093, SIG p-value
         Weight - win: 63.57767, lose: 59.41323, SIG p-value
         
Males: Age - win: 25.76901, lose: 25.68822, p-value = 0.06057 NOT SIG
       Height - win: 181.6051, lose: 178.5704, SIG p-value
       Weight - win: 79.32481, lose: 75.02488, SIG p-value
       
--> Only mean age of males does not significantly differ between medal winners and other athletes.
    Generally, all winning athletes are taller and heavier than athletes that are not winning medals.
    Female winners are older than non-winners.

```{r t-test, include = FALSE}
win.lose = c('Won a medal', "Did not win a medal")
# two-sample t-test between age/height/weight of winner and age of losers

# AGE
# Females
# t-test
t.age.F = t.test(F.Winner$Age, F.Loser$Age, alternative = "two.sided", var.equal = FALSE)
t.age.F
# aggregate means of age for females
means.af <- aggregate(Age ~ Medal, summer_F, mean)
means.af$Age = round(means.af$Age, 3)
# boxplot
ggplot(data=summer_F, aes(x= Medal, y=Age, fill=Medal)) + 
  geom_boxplot() +
  scale_fill_manual(values=c("gold", 'gray'))+
  stat_summary(fun.y=mean, colour="darkred", geom="point", 
               shape=18, size=2, show.legend =FALSE) + 
  theme(legend.position = "none", axis.title.x = element_blank())+labs(y="Age (years)")+
  geom_text(data = means.af, aes(label = Age, y = Age + 1.2))+
  ggtitle("Age of Female Athletes")+ scale_x_discrete(labels=win.lose)

# Males
t.age.M = t.test(M.Winner$Age, M.Loser$Age, alternative = "two.sided", var.equal = FALSE)
t.age.M
means.am <- aggregate(Age ~ Medal, summer_M, mean)
means.am$Age = round(means.am$Age, 3)
# boxplot
ggplot(data=summer_M, aes(x= Medal, y=Age, fill=Medal))+
  geom_boxplot() +
  scale_fill_manual(values=c("gold", 'gray'))+
  stat_summary(fun.y=mean, colour="darkred", geom="point", 
               shape=18, size=2, show.legend =FALSE) + 
  theme(legend.position = "none", axis.title.x = element_blank())+labs(y="Age (years)")+
  geom_text(data = means.am, aes(label = Age, y = Age + 1))+
  ggtitle("Age of Male Athletes")+ scale_x_discrete(labels=win.lose)




# HEIGHT
# Females
t.height.F = t.test(F.Winner$Height, F.Loser$Height, alternative = "two.sided", var.equal = FALSE)
t.height.F
# aggregate means of Height
means.hf <- aggregate(Height ~ Medal, summer_F, mean)
means.hf$Height = round(means.hf$Height, 2)
# boxplot
ggplot(data=summer_F, aes(x= Medal, y=Height, fill=Medal)) + 
  geom_boxplot() +
  scale_fill_manual(values=c("gold", 'gray'))+
  stat_summary(fun.y=mean, colour="darkred", geom="point", 
               shape=18, size=2, show.legend =FALSE) + 
  theme(legend.position = "none", axis.title.x = element_blank())+labs(y="Height (cm)")+
  geom_text(data = means.hf, aes(label = Height, y = Height + 2.3))+
  ggtitle("Height of Female Athletes")+ scale_x_discrete(labels=win.lose)

# Males
t.height.M = t.test(M.Winner$Height, M.Loser$Height, alternative = "two.sided", var.equal = FALSE)
t.height.M
# aggregate means of Height
means.hm <- aggregate(Height ~ Medal, summer_M, mean)
means.hm$Height = round(means.hm$Height, 2)
# boxplot
ggplot(data=summer_M, aes(x= Medal, y=Height, fill=Medal)) + 
  geom_boxplot() +
  scale_fill_manual(values=c("gold", 'gray'))+
  stat_summary(fun.y=mean, colour="darkred", geom="point", 
               shape=18, size=2, show.legend =FALSE) + 
  theme(legend.position = "none", axis.title.x = element_blank())+ labs(y="Height (cm)")+
  geom_text(data = means.hm, aes(label = Height, y = Height + 2.3))+
  ggtitle("Height of Male Athletes")+ scale_x_discrete(labels=win.lose)




# WEIGHT
# Females
t.weight.F = t.test(F.Winner$Weight, F.Loser$Weight, alternative = "two.sided", var.equal = FALSE)
t.weight.F
# aggregate means of Weight
means.wf <- aggregate(Weight ~ Medal, summer_F, mean)
means.wf$Weight = round(means.wf$Weight, 2)
# boxplot
ggplot(data=summer_F, aes(x= Medal, y=Weight, fill=Medal)) + geom_boxplot() +
  scale_fill_manual(values=c("gold", 'gray'))+
  stat_summary(fun.y=mean, colour="darkred", geom="point", 
               shape=18, size=2, show.legend =FALSE) + 
  theme(legend.position = "none", axis.title.x = element_blank())+ labs(y="Weight (kg)")+
  geom_text(data = means.wf, aes(label = Weight, y = Weight + 2.5))+
  ggtitle("Weight of Female Athletes")+ scale_x_discrete(labels=win.lose)

# Males
t.weight.M = t.test(M.Winner$Weight, M.Loser$Weight, alternative = "two.sided", var.equal = FALSE)
t.weight.M
# aggregate means of Weight
means.wm <- aggregate(Weight ~ Medal, summer_M, mean)
means.wm$Weight = round(means.wm$Weight, 2)
# boxplot
ggplot(data=summer_M, aes(x= Medal, y=Weight, fill=Medal))+ geom_boxplot()+ 
  scale_fill_manual(values=c("gold", 'gray'))+
  stat_summary(fun.y=mean, colour="darkred", geom="point", 
               shape=18, size=2) + 
  theme(legend.position = "none", axis.title.x = element_blank())+labs(y="Weight (kg)")+
  geom_text(data = means.wm, aes(label = Weight, y = Weight + 3))+
  ggtitle("Weight of Male Athletes")+ scale_x_discrete(labels=win.lose)
```


## Principle Component Analysis

Plots show us that Height and Weight are highly correlated. Age is orthogonal to these two variables. Thus, in the analysis I will include age and only weight to avoid multicollinearity. 

```{r Feature Selection, echo=FALSE}
# PCA
library(devtools)
# data with just Age, height weight for females
age_height_weight_F = summer_F[,4:6]

pr.f =prcomp(age_height_weight_F, scale =TRUE)
summary(pr.f)
pr.f$rotation
g.f = ggbiplot::ggbiplot(pr.f, obs.scale = 1, var.scale = 1, alpha=0.2)
g.f$layers <- c(g.f$layers, g.f$layers[[1]])
g.f + ggtitle('PCA of Female Age, Height, & Weight')


# Males PCA
# data with just Age, height weight for males
age_height_weight_M = summer_M[,4:6]

pr.m =prcomp(age_height_weight_M, scale =TRUE)
summary(pr.m)
pr.m$rotation
g.m = ggbiplot::ggbiplot(pr.m, obs.scale = 1, var.scale = 1, alpha=0.2)
g.m$layers <- c(g.m$layers, g.m$layers[[1]])
g.m + ggtitle('PCA of Male Age, Height, & Weight')

```

## Logistic Regression

Females: Age and weight have significant p-values. AIC is 46300, highest among feature iterations. VIF values are around 7, which is below the threshold of 10. Males: same results as females. 

```{r Regression, include=FALSE}
#HAVE TO CHANGE aWinner back to WINNER for Regressions
# change aWinner back to 'winner'
summer_w_NAs$Medal <- as.character(summer_w_NAs$Medal)
summer_w_NAs$Medal[summer_w_NAs$Medal == 'aWinner'] <- 'Winner'
# make sure Medal is as factor
summer_w_NAs$Medal = as.factor(summer_w_NAs$Medal)

summer_F.w = summer_w_NAs[summer_w_NAs$Sex == 'F',]

# Logistic regression F
SummerLogit.f <- glm(Medal ~ Age + Weight, data = summer_F.w, family = "binomial")
summary(SummerLogit.f)
SummerLogit.f

library(faraway)
vif(SummerLogit.f)



# Logistic regression M
summer_M.w = summer_w_NAs[summer_w_NAs$Sex == 'M',]
head(summer_M)
SummerLogit.m <- glm(Medal ~ Age + Weight, data = summer_M, family = "binomial")
summary(SummerLogit.m)


vif(SummerLogit.m)

# output
library(stargazer)
stargazer(SummerLogit.f, SummerLogit.m, out='ahw.htm')
```

## Testing the model

Females: ROC - 0.6243, McFadden value = 2.24%
Males: ROC - 0.5977, McFadden value = 1.38%

```{r Testing glm, include=FALSE}
# AIC with just using weight is higher than with height or than with height instead of weight

# FEMALES
# ROC
loadPkg("pROC")
prob_f_glm = predict(SummerLogit.f, type = c("response"))
summer_F.w$prob_f_glm=prob_f_glm
h <- roc(Medal~prob_f_glm, data=summer_F)
auc(h) # area-under-curve prefer 0.8 or higher.
plot(h)

# McFadden
loadPkg("pscl")
Logitpr2_f = pR2(SummerLogit.f)
Logitpr2_f

# MALES
# ROC
prob_m_glm = predict(SummerLogit.m, type = c("response"))
summer_M$prob_m_glm=prob_m_glm
g_m <- roc(Medal~prob_m_glm, data= summer_M)
auc(g_m)
plot(g_m)

# McFadden
loadPkg("pscl")
Logitpr2_m = pR2(SummerLogit.m)
Logitpr2_m
```

## Examining Age, Height and Weight, by sport

Average Age, Height, Weight by sport tables:

```{r Averages by Sport, echo=FALSE}
# FEMALE
# table of average age, height weight by sport
a_f = aggregate(summer_F[,4:6],by=list(summer_F$Sport), mean)
a_age_f = a_f[order(a_f$Age),]
a_height_f = a_f[order(a_f$Height),]
a_weight_f = a_f[order(a_f$Weight),]


# plot F mean age by sport
library(ggplot2)
ggplot(a_f, aes(x = reorder(Group.1, Age, FUN = median), y = Age)) + 
  geom_boxplot() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
  ylab('Mean Age (years)') + xlab('') + ggtitle('Mean Age of Female Olympic Athletes by Sport')+
  theme(plot.title = element_text(color="deeppink2", size=14, face="bold"),
        axis.title.y = element_text(color="black", face='bold'))

# plot f meab height by sport
ggplot(a_f, aes(x = reorder(Group.1, Height, FUN = median), y = Height)) + 
  geom_boxplot() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
  ylab('Mean Height (cm)') + xlab('') + ggtitle('Mean Height of Female Olympic Athletes by Sport')+
    theme(plot.title = element_text(color="deeppink2", size=14, face="bold"),
        axis.title.y = element_text(color="black", face='bold'))

# plot f mean weight by sport
ggplot(a_f, aes(x = reorder(Group.1, Weight, FUN = median), y = Weight)) + 
  geom_boxplot() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
  ylab('Mean Weight (kg)') + xlab('') + ggtitle('Mean Weight of Female Olympic Athletes by Sport')+
    theme(plot.title = element_text(color="deeppink2", size=14, face="bold"),
        axis.title.y = element_text(color="black", face='bold'))



# MALE
a_m = aggregate(summer_M[,4:6],by=list(summer_M$Sport), mean)
a_age_m = a_m[order(a_m$Age),]
a_height_m = a_m[order(a_m$Height),]
a_weight_m = a_m[order(a_m$Weight),]


# plot M mean age by sport
library(ggplot2)
ggplot(a_m, aes(x = reorder(Group.1, Age, FUN = median), y = Age)) + 
  geom_boxplot() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
  ylab('Mean Age (years)') + xlab('') + ggtitle('Mean Age of Male Olympic Athletes by Sport')+
  theme(plot.title = element_text(color="royalblue", size=14, face="bold"),
        axis.title.y = element_text(color="black", face='bold'))

# plot M mean height by sport
ggplot(a_m, aes(x = reorder(Group.1, Height, FUN = median), y = Height)) + 
  geom_boxplot() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
  ylab('Mean Height (cm)') + xlab('') + ggtitle('Mean Height of Male Olympic Athletes by Sport')+
    theme(plot.title = element_text(color="royalblue", size=14, face="bold"),
        axis.title.y = element_text(color="black", face='bold'))

# plot M mean weight by sport
ggplot(a_m, aes(x = reorder(Group.1, Weight, FUN = median), y = Weight)) + 
  geom_boxplot() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
  ylab('Mean Weight (kg)') + xlab('') + ggtitle('Mean Weight of Male Olympic Athletes by Sport')+
    theme(plot.title = element_text(color="royalblue", size=14, face="bold"),
        axis.title.y = element_text(color="black", face='bold'))

```


# Case Study: Gymnastics


This is just Gymnastics, not including Rhythmic Gymnastics. Gymnasts have the smallest height and weight for both males and females.

```{r Subset Gymnastics, include=FALSE}
# make it back to aWinner
summer_w_NAs$Medal <- as.character(summer_w_NAs$Medal)
summer_w_NAs$Medal[summer_w_NAs$Medal == 'Winner'] <- 'aWinner'
summer_w_NAs$Medal = as.factor(summer_w_NAs$Medal)
head(summer_w_NAs)

# subset just gymnasts
gymnastics = summer_w_NAs[summer_w_NAs$Sport == 'Gymnastics',]

# separate males and females
gym_f = gymnastics[gymnastics$Sex =='F',]
gym_m = gymnastics[gymnastics$Sex =='M',]

# female win/lose
gym_f.win = gym_f[gym_f$Medal == "aWinner",]
gym_f.lose = gym_f[gym_f$Medal == "Loser",]

# male win/lose
gym_m.win = gym_m[gym_m$Medal == "aWinner",]
gym_m.lose = gym_m[gym_m$Medal == "Loser",]

```


## Does Age, Height, Weight differ between winner and loser Gymnasts?

### Age
Female winners are slightly older than losers. Age between gymnasts and rest of athletes greatly differs, they are much younger. 

Age of male gymnasts does not significantly differ between winners and losers. However, male gymnasts are younger than the rest of the competing athletes
```{r Gymnastics Age, include=FALSE}
# AGE
# Females
# t-test
gym.t.age.F = t.test(gym_f.win$Age, gym_f.lose$Age, alternative = "two.sided", var.equal = FALSE)
gym.t.age.F
# aggregate means of age for females
gym.means.af <- aggregate(Age ~ Medal, gym_f, mean)
gym.means.af$Age = round(gym.means.af$Age, 2)
# boxplot
ggplot(data=gym_f, aes(x= Medal, y=Age, fill=Medal)) + 
  geom_boxplot() +
  scale_fill_manual(values=c("gold", 'gray'))+
  stat_summary(fun.y=mean, colour="darkred", geom="point", 
               shape=18, size=2, show.legend =FALSE) + 
  theme(legend.position = "none", axis.title.x = element_blank())+labs(y="Age (years)")+
  geom_text(data = gym.means.af, aes(label = Age, y = Age + 0.5))+
  ggtitle("Age of Female Gymnasts") + scale_x_discrete(labels=win.lose)

# Age of females and rest of population??
mean(gym_f$Age)
no_gym_F = summer_F[summer_F$Sport != "Gymnastics",]
mean(no_gym_F$Age)

# Males
# t-test
gym.t.age.M = t.test(gym_m.win$Age, gym_m.lose$Age, alternative = "two.sided", var.equal = FALSE)
gym.t.age.M
# aggregate means of age for females
gym.means.am <- aggregate(Age ~ Medal, gym_m, mean)
gym.means.am$Age = round(gym.means.am$Age, 2)
# boxplot
ggplot(data=gym_m, aes(x= Medal, y=Age, fill=Medal)) + 
  geom_boxplot() +
  scale_fill_manual(values=c('gold','gray'))+
  stat_summary(fun.y=mean, colour="darkred", geom="point", 
               shape=18, size=2, show.legend =FALSE) + 
  theme(legend.position = "none", axis.title.x = element_blank())+labs(y="Age (years)")+
  geom_text(data = gym.means.am, aes(label = Age, y = Age + 1))+
  ggtitle("Age of Male Gymnasts")+ scale_x_discrete(labels=win.lose)

# Age of males and rest of population
mean(gym_m$Age) 
no_gym_M = summer_M[summer_M$Sport != "Gymnastics",]
mean(no_gym_M$Age)
```

### Height
Female winners are shorter than losers. Same for males. Compared to total population of athletes, gymnasts are way shorter

```{r Gymnastics Height, echo=FALSE}
# Females
gym.t.height.F = t.test(gym_f.win$Height, gym_f.lose$Height, alternative = "two.sided", var.equal = FALSE)
gym.t.height.F
# aggregate means of Height
gym.means.hf <- aggregate(Height ~ Medal, gym_f, mean)
gym.means.hf$Height = round(gym.means.hf$Height, 2)
# boxplot
ggplot(data=gym_f, aes(x= Medal, y=Height, fill=Medal)) + 
  geom_boxplot() +
  scale_fill_manual(values=c("gold", 'gray'))+
  stat_summary(fun.y=mean, colour="darkred", geom="point", 
               shape=18, size=2, show.legend =FALSE) + 
  theme(legend.position = "none", axis.title.x = element_blank())+labs(y="Height (cm)")+
  geom_text(data = gym.means.hf, aes(label = Height, y = Height + 3))+
  ggtitle("Height of Female Gymnasts") + scale_x_discrete(labels=win.lose)

# Height of females and rest of population??
mean(gym_f$Height)
mean(no_gym_F$Height)

# Males
gym.t.height.M = t.test(gym_m.win$Height, gym_m.lose$Height, alternative = "two.sided", var.equal = FALSE)
gym.t.height.M
# aggregate means of Height
gym.means.hm <- aggregate(Height ~ Medal, gym_m, mean)
gym.means.hm$Height = round(gym.means.hm$Height, 2)
# boxplot
ggplot(data=gym_m, aes(x=Medal, y=Height, fill=Medal)) + 
  geom_boxplot() +
  scale_fill_manual(values=c("gold", 'gray'))+
  stat_summary(fun.y=mean, colour="darkred", geom="point", 
               shape=18, size=2, show.legend =FALSE) + 
  theme(legend.position = "none", axis.title.x = element_blank())+labs(y="Height (cm)")+
  geom_text(data = gym.means.hm, aes(label = Height, y = Height + 2.3))+
  ggtitle("Height of Male Gymnasts") + scale_x_discrete(labels=win.lose)

# Height of females and rest of population??
mean(gym_m$Height)
mean(no_gym_M$Height)

```

### Weight
Female winners are lighter than losers. Same for males. They are both much much lighter than the total population. 

```{r Gymnast Weight, echo=FALSE}
# Females
gym.t.weight.F = t.test(gym_f.win$Weight, gym_f.lose$Weight, alternative = "two.sided", var.equal = FALSE)
gym.t.weight.F
# aggregate means of Weight
gym.means.wf <- aggregate(Weight ~ Medal, gym_f, mean)
gym.means.wf$Weight = round(gym.means.wf$Weight, 2)
# boxplot
ggplot(data=gym_f, aes(x= Medal, y=Weight, fill=Medal)) + 
  geom_boxplot() +
  scale_fill_manual(values=c("gold", 'gray'))+
  stat_summary(fun.y=mean, colour="darkred", geom="point", 
               shape=18, size=2, show.legend =FALSE) + 
  theme(legend.position = "none", axis.title.x = element_blank())+labs(y="Weight (kg)")+
  geom_text(data = gym.means.wf, aes(label = Weight, y = Weight + 2.3))+
  ggtitle("Weight of Female Gymnasts") + scale_x_discrete(labels=win.lose)

# Weight of females and rest of population??
mean(gym_f$Weight)
mean(no_gym_F$Weight)


# Males
gym.t.weight.M = t.test(gym_m.win$Weight, gym_m.lose$Weight, alternative = "two.sided", var.equal = FALSE)
gym.t.weight.M
# aggregate means of Weight
gym.means.wm <- aggregate(Weight ~ Medal, gym_m, mean)
gym.means.wm$Weight = round(gym.means.wm$Weight, 2)
# boxplot
ggplot(data=gym_m, aes(x= Medal, y=Weight, fill=Medal)) + 
  geom_boxplot() +
  scale_fill_manual(values=c("gold", 'gray'))+
  stat_summary(fun.y=mean, colour="darkred", geom="point", 
               shape=18, size=2, show.legend =FALSE) + 
  theme(legend.position = "none", axis.title.x = element_blank())+labs(y="Weight (kg)")+
  geom_text(data = gym.means.wm, aes(label = Weight, y = Weight + 2))+
  ggtitle("Weight of Male Gymnasts") + scale_x_discrete(labels=win.lose)

# Weight of females and rest of population??
mean(gym_m$Weight)
mean(no_gym_M$Weight)
```

```{r Gymnastics Regression, include=FALSE}
# Change it back to 'winner'
# change aWinner back to 'winner'
summer_w_NAs$Medal <- as.character(summer_w_NAs$Medal)
summer_w_NAs$Medal[summer_w_NAs$Medal == 'aWinner'] <- 'Winner'
# make sure Medal is as factor
summer_w_NAs$Medal = as.factor(summer_w_NAs$Medal)

# subset just gymnasts from 'winner'
gymnastics.w = summer_w_NAs[summer_w_NAs$Sport == 'Gymnastics',]

# separate males and females
gym_f.w = gymnastics.w[gymnastics.w$Sex =='F',]
gym_m.w = gymnastics.w[gymnastics.w$Sex =='M',]

head(gym_f.w)

# Logistic Regression Female Gymnasts
gym_glm_f = glm(Medal~Age+Height, data=gym_f.w, family = "binomial")
summary(gym_glm_f)

# vif F-Gymnast
library(faraway)
vif(gym_glm_f)

# testing the model
# ROC
loadPkg("pROC")
prob_f_gym = predict(gym_glm_f, type = c("response"))
gym_f.w$prob_f_gym=prob_f_gym
h.gf <- roc(Medal~prob_f_gym, data=gym_f.w)
auc(h.gf) # area-under-curve prefer 0.8 or higher.

# McFadden
loadPkg("pscl")
Logitpr2_gym_f = pR2(gym_glm_f)
Logitpr2_gym_f



# Logistic Regression Male Gymnasts
gym_glm_m = glm(Medal~Age+Height, data=gym_m.w, family = "binomial")
summary(gym_glm_m)

# vif M-Gymnast
vif(gym_glm_m)


# testing the model
# ROC
prob_m_gym = predict(gym_glm_m, type = c("response"))
gym_m.w$prob_m_gym=prob_m_gym
h.gm <- roc(Medal~prob_m_gym, data=gym_m.w)
auc(h.gm) # area-under-curve prefer 0.8 or higher.

# McFadden
Logitpr2_gym_m = pR2(gym_glm_m)
Logitpr2_gym_m

library(stargazer)
#stargazer(gym_glm_f, gym_glm_m, out='ahw_gym.htm')
```


# Case study 2: Weightlifting

Height and Weight are not proportional.

```{r Subset weightlifting, include=FALSE}
# change it back to aWinner
# THIS IS VERY IMPORTANT PART OF THE CODE
summer_w_NAs <- subset(athlete_events, Season == 'Summer')
summer_w_NAs$Medal <- as.character(summer_w_NAs$Medal)
summer_w_NAs$Medal[is.na(summer_w_NAs$Medal)] <- "Loser"

# made it 'a' in the beginning so that in the boxplots it is the one on the left
summer_w_NAs$Medal[summer_w_NAs$Medal == 'Bronze'] <- 'aWinner'
summer_w_NAs$Medal[summer_w_NAs$Medal == 'Silver'] <- 'aWinner'
summer_w_NAs$Medal[summer_w_NAs$Medal == 'Gold'] <- 'aWinner'

# make sure Medal is as factor
summer_w_NAs$Medal = as.factor(summer_w_NAs$Medal)

# subset weightlifting
weightlifting = summer_w_NAs[summer_w_NAs$Sport == 'Weightlifting',]
weightlifting.win = weightlifting[weightlifting$Medal=='aWinner',]
weight_f = weightlifting[weightlifting$Sex =='F',]
weight_m = weightlifting[weightlifting$Sex =='M',]

weight_f.win = weight_f[weight_f$Medal == "aWinner",]
weight_f.lose = weight_f[weight_f$Medal == "Loser",]

weight_m.win = weight_m[weight_m$Medal == "aWinner",]
weight_m.lose = weight_m[weight_m$Medal == "Loser",]
```

 

```{r weight t-test, echo=FALSE, include=FALSE}
# take out weightlifting
no_weightlift = summer_w_NAs[summer_w_NAs$Sport != 'Weightlifting',]

# plot height and weight
ggplot(weightlifting, aes(x=Weight, y=Height,, color=Sex)) +
  geom_point(size=0.5)+
  geom_smooth(method='auto')+
  ggtitle("Weight vs. Height for Weightlifters")+
  xlab('Weight(kg)')+ ylab("Height(cm)")+ xlim(0,175)+
  scale_color_manual(values=c('deeppink2','royalblue'))

# plot winners height vs. weight
ggplot(weightlifting.win, aes(x=Weight, y=Height,, color=Sex)) +
  geom_point(size=0.5)+
  geom_smooth(method='auto')+
  ggtitle("Weight vs. Height for Weightlifters")+
  xlab('Weight(kg)')+ ylab("Height(cm)")+ xlim(0,175)+
  scale_color_manual(values=c('deeppink2','royalblue'))

# create dataframe that marks all other sports as "other" and keeps weightlifting
new_w = summer_w_NAs
new_w$Sport = as.character(new_w$Sport)
new_w$Sport[new_w$Sport!='Weightlifting']<- 'All other sports'

# plot height vs. weight for all other sports and weightlifting to compare
ggplot(new_w, aes(x=Weight, y=Height,, color=Sport)) +
  geom_point(size=0.3)+
  geom_smooth(method='auto')+
  ggtitle("Weight vs. Height of All Athletes and Weightlifters")+
  xlab('Weight(kg)')+ ylab("Height(cm)")+ xlim(0,200)+
  scale_color_manual(values=c('darkgray','red'))
```


### T-tests

Age is not significant difference between winners and losers (M&F).
Height is not significant difference between winners and losers.
Weight is not significant for females. For males, winners means are significantly heavier than losers. 

```{r Weightlifting t-test, include=FALSE}
# AGE: 
# Females
weight.t.age.F = t.test(weight_f.win$Age, weight_f.lose$Age, alternative = "two.sided", var.equal = FALSE)
weight.t.age.F

# males
weight.t.age.M = t.test(weight_m.win$Age, weight_m.lose$Age, alternative = "two.sided", var.equal = FALSE)
weight.t.age.M


# HEIGHT
# females
weight.t.height.F = t.test(weight_f.win$Height, weight_f.lose$Height, alternative = "two.sided", var.equal = FALSE)
weight.t.height.F

# males
weight.t.height.M = t.test(weight_m.win$Height, weight_m.lose$Height, alternative = "two.sided", var.equal = FALSE)
weight.t.height.M



# WEIGHT
# females
weight.t.weight.F = t.test(weight_f.win$Weight, weight_f.lose$Weight, alternative = "two.sided", var.equal = FALSE)
weight.t.weight.F

# males
weight.t.weight.M = t.test(weight_m.win$Weight, weight_m.lose$Weight, alternative = "two.sided", var.equal = FALSE)
weight.t.weight.M
```



```{r Weightlifting Regression, include=FALSE}
# change aWinner back to 'winner'for regressions
summer_w_NAs$Medal <- as.character(summer_w_NAs$Medal)
summer_w_NAs$Medal[summer_w_NAs$Medal == 'aWinner'] <- 'Winner'
# make sure Medal is as factor
summer_w_NAs$Medal = as.factor(summer_w_NAs$Medal)

# subset just gymnasts from 'winner'
weightlift.w = summer_w_NAs[summer_w_NAs$Sport == 'Weightlifting',]

# separate males and females
weight_f.w = weightlift.w[weightlift.w$Sex =='F',]
weight_m.w = weightlift.w[weightlift.w$Sex =='M',]


# Logistic Regression Female Weightlifters

weight_glm.f = glm(Medal~Age+Height+Weight, data=weight_f.w, family = "binomial")
summary(weight_glm.f)

# vif F-Gymnast
library(faraway)
vif(weight_glm.f)

# testing the model
# ROC
loadPkg("pROC")
prob_f_weight = predict(weight_glm.f, type = c("response"))
#weight_f.w$prob_f_weight=prob_f_weight
#h.wf <- roc(Medal~prob_f_weight, data=weight_f.w)
#auc(h.wf) # area-under-curve prefer 0.8 or higher.

# McFadden
loadPkg("pscl")
Logitpr2_weight_f = pR2(weight_glm.f)
Logitpr2_weight_f



# Logistic Regression Male weightlifters
weight_glm_m = glm(Medal~Age+Height+Weight, data=weight_m.w, family = "binomial")
summary(weight_glm_m)

# vif M-weightnast
vif(weight_glm_m)


# testing the model
# ROC
prob_m_weight = predict(weight_glm_m, type = c("response"))
#weight_m.w$prob_m_weight=prob_m_weight
#h.wm <- roc(Medal~prob_m_weight, data=weight_m.w)
#auc(h.wm) # area-under-curve prefer 0.8 or higher.

# McFadden
Logitpr2_weight_m = pR2(weight_glm_m)
Logitpr2_weight_m

library(stargazer)
#stargazer(weight_glm.f, weight_glm_m, out='ahw_weight.htm')
```


#SMART 3
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(include = F)
knitr::opts_chunk$set(collapse = T, results = 'hide', warning = F, message = F, error = F)
options(scientific=T, digits = 3)
options(scipen=999)
```

```{r basicfcn}
loadPkg = function(x) { if (!require(x,character.only=T, quietly =T)) { install.packages(x,dep=T,repos="http://cran.us.r-project.org"); if(!require(x,character.only=T)) stop("Package not found") } }
```

```{r init}
loadPkg('readxl')
#loading the datasets
gdp <- read_excel("GDP_Super_Cool.xlsm")
athlete_events <- data.frame(read.csv("athlete_events.csv"))
NOC <- data.frame(read.csv("noc_regions.csv"))
```

```{r cleaning_data}
# keeping NAs for analysis of winners and losers
summer_w_NAs = athlete_events[athlete_events$Season=='Summer',]
# differenciate between winners and losers
# THIS IS VERY IMPORTANT PART OF THE CODE
summer_w_NAs <- subset(athlete_events, Season == 'Summer')
summer_w_NAs$Medal <- as.character(summer_w_NAs$Medal)
summer_w_NAs$Medal[is.na(summer_w_NAs$Medal)] <- "Loser"
summer_w_NAs$Medal[summer_w_NAs$Medal == 'Bronze'] <- 'Winner'
summer_w_NAs$Medal[summer_w_NAs$Medal == 'Silver'] <- 'Winner'
summer_w_NAs$Medal[summer_w_NAs$Medal == 'Gold'] <- 'Winner'
```

```{r merging_dataframe_with_NOC}
#merging the NOc dataset with Summer_w_NAs by NOC
SummerNOC = merge(summer_w_NAs, NOC, by=c("NOC"))
str(SummerNOC)
```

```{r missing_values}
#identifying the missing values for the region column
sum(is.na(SummerNOC$region))
regionNA <- SummerNOC[is.na(SummerNOC$region),]
regionNA
```

```{r deleting_NAs}
#decided to delete the NAs in the region column as they are not relevant for the analysis
SummerNOC <- SummerNOC[!is.na(SummerNOC$region), ]
SummerNOC <- SummerNOC[ , -8]
SummerNOC <- SummerNOC[ , -16]
#renaming the region column to Country
colnames(SummerNOC)[which(names(SummerNOC) == "region")] <- "Country"
```

```{r renaming_countries}
#renaming some of the countries in the gdp dataset as they have a different name in the SummerNOC dataset. This will allow us to create a more accurate dataframe when we merge gdp and SummerNOC
gdp$Country[gdp$Country == 'Egypt, Arab Rep.'] <- 'Egypt'
gdp$Country[gdp$Country == 'Bahamas, The'] <- 'Bahamas'
gdp$Country[gdp$Country == 'Iran, Islamic Rep.'] <- 'Iran'
gdp$Country[gdp$Country == "Cote d'Ivoire"] <- 'Ivory Coast'
gdp$Country[gdp$Country == 'Kyrgyz Republic'] <- 'Kyrgyzstan'
gdp$Country[gdp$Country == 'North Macedonia'] <- 'Macedonia'
gdp$Country[gdp$Country == "Korea, Dem. People's Rep."] <- 'North Korea'
gdp$Country[gdp$Country == 'Russian Federation'] <- 'Russia'
gdp$Country[gdp$Country == 'Slovak Republic'] <- 'Slovakia'
gdp$Country[gdp$Country == 'Korea, Rep.'] <- 'South Korea'
gdp$Country[gdp$Country == 'Syrian Arab Republic'] <- 'Syria'
gdp$Country[gdp$Country == 'Trinidad and Tobago'] <- 'Trinidad'
gdp$Country[gdp$Country == 'United Kingdom'] <- 'UK'
gdp$Country[gdp$Country == 'United States'] <- 'USA'
gdp$Country[gdp$Country == 'Venezuela, RB'] <- 'Venezuela'
gdp$Country[gdp$Country == 'Virgin Islands (U.S.)'] <- 'Virgin Islands, US'
```

```{r new_dataset}
#creating a new data frame SummerGDP by merging SummerNOC and gdp by Year and Country
Summer_GDP = merge(SummerNOC, gdp, by=c("Country", "Year"))
str(Summer_GDP)
```

```{r new_dataset_1}
#scaling GDP, converting Medal to factor, and removing NAs
Summer_GDP$GDP <- scale(Summer_GDP$GDP)
Summer_GDP$Medal <- as.factor(Summer_GDP$Medal)
sum(is.na(Summer_GDP))
Summer_GDP_nona <- na.omit(Summer_GDP)
```

```{r new_dataset_2}
#displaying the number of rows of the new data frame withou NA
nrow(Summer_GDP_nona)
```

```{r graph1}
#creating a bix plot that displays Winner/Losers and GDP
plot(GDP ~ Medal, data = Summer_GDP_nona, main = "GDP for Losers and Winners", xlab = "Loser/Winner", ylab = "GDP", col = c("darkblue", "antiquewhite"))
```

```{r Anova1}
#Performing ANOVA test on GDP and Medal
GDP_aov <- aov(GDP ~ Medal, data = Summer_GDP_nona)
names(GDP_aov)
summary(GDP_aov)
```

The null hypothesis of this test is the following: the people who won a medal and people who did not win a medal have the same mean for GDP. 

From the ANOVA test we got a really tiny p-value which is way smaller than our confidence level 0.05 and therefore we reject the null hypothesis and conclude that GDP has an effect on whether an athlete earns a medal. As we can see visually from the boxplot, athletes who won a medal tend to come from countries with higher GDP.  


```{r logistic_regression}
#performing Logistic regression on GDP and Medal
GDPLogit <- glm(Medal ~ GDP, data = Summer_GDP_nona, family = "binomial")
summary(GDPLogit)
```

To evaluate whether our model is good, we are going to perform the following tests: 

* Receiver-Operator-Characteristic curve and Area-Under-Curve:
```{r ROC, include = TRUE, echo= FALSE}
loadPkg("pROC")
prob = predict(GDPLogit, type = c("response"))
Summer_GDP_nona$prob=prob
g <- roc(Medal~prob, data= Summer_GDP_nona)
auc(g)
plot(g)
#roc_obj <- roc(data2$Medal, data2$GDP)
##auc(roc_obj)
#plot(roc_obj)
```

The area-under-curve for this model is `r auc(g)`, which is less than 0.8. Althought `r auc(g)` is not much smaller than 0.8, this means that this model is not a good fit.

* McFadden:

```{r McFadden}
loadPkg("pscl")
GDPLogitpr2 = pR2(GDPLogit)
GDPLogitpr2
```

With the McFadden value of `r format(GDPLogit['McFadden'], 4)` only 2% of the variation in y is explained by the explanatory variables in the model, which is not good.

```{r logistic_regression2}
#running logistic regression with more variables to see whether it improves the model
GDPLogit1 <- glm(Medal ~ GDP+Weight+ Age + Sex, data = Summer_GDP_nona, family = "binomial")
summary(GDPLogit1)
```

To evaluate whether our model is good, we are going to perform the following tests: 

* Receiver-Operator-Characteristic curve and Area-Under-Curve:
```{r ROC1, include = TRUE, echo= FALSE}
prob1 = predict(GDPLogit1, type = c("response"))
Summer_GDP_nona$prob1=prob1
h <- roc(Medal~prob1, data= Summer_GDP_nona)
auc(h)
plot(h)
```

The area-under-curve for this model is `r auc(h)`, which is less than 0.8. Althought `r auc(h)` is not much smaller than 0.8, this means that this model is not a good fit.

* McFadden:

```{r McFadden1}
loadPkg("pscl")
GDPLogitpr2_1 = pR2(GDPLogit1)
GDPLogitpr2_1
```

In this case, we got a McFadden value of `r format(GDPLogit1['McFadden'], 4)`. This means that our model is a good fit. 

* We are aslo going to run the Aikake information criterion to compare the two models and see which one of the two is better. 

```{r Q8c}
AIC(GDPLogit)
AIC(GDPLogit1)
```

We got `r AIC(GDPLogit)` for the first model and `r AIC(GDPLogit1)` for the second model.That means that the second model is better as its value is lower. 

```{r graph2}
#plotting GDP and Sex in a boxplot
plot(GDP ~ Sex, data = Summer_GDP_nona, main = "GDP for Men and Women", xlab = "Men/Women", ylab = "GDP", col = c("deeppink1", "dodgerblue1"))
```

```{r ANOVA2}
#running ANOVA test for GDP and Sex
GDP_Sex_aov <- aov(GDP ~ Sex, data = Summer_GDP_nona)
names(GDP_Sex_aov)
summary(GDP_Sex_aov)
```

The null hypothesis of this test is the following: the female athletes and male athletes have the same mean for GDP. 

From the ANOVA test we got a really tiny p-value which is way smaller than our confidence level 0.05 and therefore we reject the null hypothesis and conclude that GDP has an effect on whether female athletes partecipate to the olympics. As we can see visually from the boxplot, female athletes tend to partecipate more often if they come from a country with a higher GDP. 

```{r frequency_table}
#creating a frequency table with the number of participants for each country over the years
table1 <- table(Summer_GDP_nona$Country, Summer_GDP_nona$Year)
table1 <- data.frame(table1) #converting the table into a data frame
#renaming the columns in table1. The Freq column actually indicates the number of participants for each country each year and therefore it was named Participants
colnames(table1)[which(names(table1) == "Var1")] <- "Country"
colnames(table1)[which(names(table1) == "Var2")] <- "Year"
colnames(table1)[which(names(table1) == "Freq")] <- "Participants"
```

```{r another_new_dataframe}
#merging table1 and gdp to create a new data frame SummerGDPFreq 
SummerGDPFreq = merge(table1, gdp, by=c("Country", "Year"))
sum(is.na(SummerGDPFreq$GDP))
SummerGDPFreq <- SummerGDPFreq[!is.na(SummerGDPFreq$GDP), ]
SummerGDPFreq$GDP <- scale(SummerGDPFreq$GDP)
str(SummerGDPFreq)
```

```{r correlation_table}
GDPFreqcor <- cor(SummerGDPFreq[3:4])
GDPFreqcor
```

```{r corrplot}
loadPkg("corrplot")
corrplot(GDPFreqcor)
corrplot(GDPFreqcor, method = "number")
```

```{r lm1}
model1 <- lm(Participants ~ GDP, data = SummerGDPFreq)
summary(model1)
slope <- coef(model1)
slope
```

After we ran our linear regression model, we got an intercept of `r format(coef(model1)[1])` and a slope of `r format(coef(model1)[2])`. This means that for an increase of one point for the scaled GDP, which is worth billions of dollars, we expect an increase of more than 72 participants in total on average. Additionally, we got a really tiny p-value for the slope. Therefore, we reject the null hypotheisis, which is that the intercept and the slope is equal to 0, and we say that our slope is statistically significant. 

Finally, we got an R-squared value of 0.336. This means that our model accounts for approximately 34% of the variance.

```{r lm1_plotted}
plot(model1)
loadPkg("ggplot2")
ggplot(model1,aes(GDP,Participants))+geom_point(aes(GDP,Participants)) + geom_line(aes(Participants), colour="red", size=1)
```

```{r starting_KNN}
loadPkg("FNN")
head(summer_w_NAs)
#first we want to scale the data so KNN will operate correctly
scaledoly1 <- as.data.frame(scale(Summer_GDP_nona[c(7:9, 16)], center = TRUE, scale = TRUE))
```
 
```{r setting_sample}
set.seed(1)
oly_sample1 <- sample(2, nrow(scaledoly1), replace=TRUE, prob=c(0.67, 0.33))
oly_sample1
scaledoly1
```

```{r creating_training_and_test}
oly_training1 <- scaledoly1[oly_sample1==1, 1:3]
oly_test1 <- scaledoly1[oly_sample1==2, 1:3]
```

```{r creating_YValues}
#Now we need to create our 'Y' variables or labels need to input into the KNN function
oly.trainLabels1 <- Summer_GDP_nona[oly_sample1==1, 15]
oly.testLabels1 <- Summer_GDP_nona[oly_sample1==2, 15]
```

```{r K3} 
oly_pred1 <- knn(train = oly_training1, test = oly_test1, cl=oly.trainLabels1, k=3)
oly_pred1
```

```{r K3_crosstable, include= TRUE, echo = False}
loadPkg("gmodels")
OLYPREDCross1 <- CrossTable(oly.testLabels1, oly_pred1, prop.chisq = FALSE)
```

```{r K5} 
oly_pred2 <- knn(train = oly_training1, test = oly_test1, cl=oly.trainLabels1, k=5)
oly_pred2
```

```{r K5_crosstable}
OLYPREDCross2 <- CrossTable(oly.testLabels1, oly_pred2, prop.chisq = FALSE)
```

```{r K7} 
oly_pred3 <- knn(train = oly_training1, test = oly_test1, cl=oly.trainLabels1, k=7)
oly_pred3
```

```{r K7_crosstable}
OLYPREDCross3 <- CrossTable(oly.testLabels1, oly_pred3, prop.chisq = FALSE)
```

```{r acc1}
kNN_acc1 =  100 * sum(oly.testLabels1 == oly_pred1)/NROW(oly.testLabels1)
kNN_acc1
```

```{r acc2}
kNN_acc2 =  100 * sum(oly.testLabels1 == oly_pred2)/NROW(oly.testLabels1)
kNN_acc2
```

```{r acc3}
kNN_acc3 =  100 * sum(oly.testLabels1 == oly_pred3)/NROW(oly.testLabels1)
kNN_acc3
```
